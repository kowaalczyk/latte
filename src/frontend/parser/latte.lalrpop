use std::str::FromStr;
use std::collections::HashMap;

use crate::frontend::ast;
use crate::frontend::ast::{Keyed, AstItem};
use crate::frontend::error::FrontendError;
use crate::meta::{Meta, LocationMeta};
use crate::util::env;
use crate::util::env::UniqueEnv;

use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<FrontendError<LocationMeta>>);

// --- macros ---

/// vector of 0 or more T separated by Sep
Separated<Sep, T>: Vec<T> = {
    <v:(<T> Sep)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

/// vector of 1 or more T separated by Sep
NonEmptySeparated<Sep, T>: Vec<T> = {
    <v:(<T> Sep)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

/// wrap the item together with LocationMeta
Located<ItemT>: AstItem<ItemT, LocationMeta> = {
    <offset:@L> <item:ItemT> => {
        let meta = LocationMeta { offset };
        AstItem::new(item, meta)
    }
};

/// wrap the item in a Box (useful to preserve Box vs Meta order in nested structures)
Boxed<ItemT>: Box<ItemT> = {
    <item:ItemT> => Box::new(item),
};

// --- top level ---

pub Program: ast::Program<LocationMeta> = {
    <topdefs:TopDef+> => {
        let mut functions: env::Env<ast::Function<LocationMeta>> = env::Env::new();
        let mut classes: env::Env<ast::Class<LocationMeta>> = env::Env::new();
        for topdef in topdefs {
            let location = topdef.get_meta();
            match &topdef.item {
                ast::TopDefKind::Class { cls } => {
                    classes.insert_unique(cls.get_key().clone(), cls.clone())
                        .or_else(|e| { errors.push(e); Err(()) });
                },
                ast::TopDefKind::Function { func } => {
                    functions.insert_unique(func.get_key().clone(), func.clone())
                        .or_else(|e| { errors.push(e); Err(()) });
                },
                ast::TopDefKind::Error => (),
            };
        }
        ast::Program { functions, classes }
    },
};

TopDef = Located<TopDefKind>;
TopDefKind: ast::TopDefKind<LocationMeta> = {
    <offset:@L> <ret:Type> <ident:Ident> "(" <arg_vec:Args> ")" <block:Block> => {
        match ast::FunctionItem::new(ret, ident, arg_vec, block) {
            Ok(func_item) => {
                ast::TopDefKind::Function { func: ast::Function::new(func_item, LocationMeta::from(offset)) }
            },
            Err(mut e) => {
                errors.append(&mut e);
                ast::TopDefKind::Error
            }
        }
    },
    <offset:@L> "class" <ident:Ident> "{" <var_vec:ClassVar*> <method_vec:Method*> "}" => {
        let mut method_env_errors: Vec<_> = method_vec.clone().into_iter().filter_map(Result::err).flatten().collect();
        let mut var_vec = var_vec.clone();
        if method_env_errors.is_empty() {
            let mut method_vec: Vec<_> = method_vec.into_iter().filter_map(Result::ok).collect();
            match ast::ClassItem::new(ident, &mut var_vec, &mut method_vec) {
                Ok(mut cls_item) => {
                    let cls = ast::Class::new(cls_item, LocationMeta::from(offset));
                    ast::TopDefKind::Class { cls }
                },
                Err(mut e) => {
                    errors.append(&mut e);
                    ast::TopDefKind::Error
                }
            }
        } else {
            errors.append(&mut method_env_errors);
            ast::TopDefKind::Error
        }
    },
    <offset:@L> "class" <ident:Ident> "extends" <parent:Ident> "{" <var_vec:ClassVar*> <method_vec:Method*> "}" => {
        let mut method_env_errors: Vec<_> = method_vec.clone().into_iter().filter_map(Result::err).flatten().collect();
        let mut var_vec = var_vec.clone();
        if method_env_errors.is_empty() {
            let mut method_vec: Vec<_> = method_vec.into_iter().filter_map(Result::ok).collect();
            match ast::ClassItem::new(ident, &mut var_vec, &mut method_vec) {
                Ok(mut cls_item) => {
                    let cls = ast::Class::new(cls_item.with_parent(&parent), LocationMeta::from(offset));
                    ast::TopDefKind::Class { cls }
                },
                Err(mut e) => {
                    errors.append(&mut e);
                    ast::TopDefKind::Error
                }
            }
        } else {
            errors.append(&mut method_env_errors);
            ast::TopDefKind::Error
        }
    },
    ! => {
        errors.push(FrontendError::from(<>));
        ast::TopDefKind::Error
    },
};

ClassVar = Located<ClassVarItem>;
ClassVarItem: ast::ClassVarItem = {
    <t:Type> <ident:Ident> ";" => {
        ast::ClassVarItem { t, ident }
    },
};

Method: Result<ast::Function<LocationMeta>, Vec<FrontendError<LocationMeta>>> = {
    <offset:@L> <ret:Type> <ident:Ident> "(" <args:Args> ")" <block:Block> => {
        // not to be confused with ast::TopDef::Function 
        let func = ast::FunctionItem::new(ret, ident, args, block)?;
        let meta = LocationMeta { offset };
        Ok(ast::Function::new(func, meta))
    },
};

Arg = Located<ArgItem>;
ArgItem: ast::ArgItem = {
    <t:Type> <ident:Ident> => ast::ArgItem { t, ident },
};

Args = Separated<",", Arg>;


// --- blocks ---

Block = Located<BlockItem>;
BlockItem: ast::BlockItem<LocationMeta> = {
    "{" <stmts:Statement*> "}" => ast::BlockItem { stmts },
};

// --- statements ---

Statement = StatementADI<"I">;
StatementADI<I> = Boxed<Located<StatementKindADI<I>>>;
// StatementKind = StatementKindADI<"I">;
StatementKindADI<I>: ast::StatementKind<LocationMeta> = {
    <block:Block> => {
        ast::StatementKind::Block { block }
    },
    ";" => ast::StatementKind::Empty,
    <t:Type> <items:DeclItems> ";" => {
        ast::StatementKind::Decl { t, items }
    },
    <r:Reference> "=" <expr:Expr0> ";" => {
        ast::StatementKind::Ass { r, expr }
    },
    <r:Reference> "++" ";" => {
        ast::StatementKind::Mut { r, op: ast::StatementOp::Increment }
    },
    <r:Reference> "--" ";" => {
        ast::StatementKind::Mut { r, op: ast::StatementOp::Decrement }
    },
    "return" <e:Expr0> ";" => {
        ast::StatementKind::Return { expr: Option::Some(e) }
    },
    "return" ";" => {
        ast::StatementKind::Return { expr: Option::None }
    },
    // we only allow dangling if when template parameter I != "" (I == "I")
    "if" "(" <expr:Expr0> ")" <stmt:StatementADI<"I">> if I != "" => {
        ast::StatementKind::Cond { expr, stmt }
    },
    "if" "(" <expr:Expr0> ")" <stmt_true:StatementADI<"">> "else" <stmt_false:StatementADI<I>> => {
        ast::StatementKind::CondElse { expr, stmt_true, stmt_false }
    },
    "while" "(" <expr:Expr0> ")" <stmt:StatementADI<I>> => {
        ast::StatementKind::While { expr, stmt }
    },
    "for" "(" <t:Type> <ident:Ident> ":" <arr:Expr0> ")" <stmt:StatementADI<I>> => {
        ast::StatementKind::For { t, ident, arr, stmt }
    },
    <expr:Expr0> ";" => ast::StatementKind::Expr { expr },
    ! => {
        errors.push(FrontendError::from(<>));
        ast::StatementKind::Error
    },
};

DeclItem = Located<DeclItemKind>;
DeclItemKind: ast::DeclItemKind<LocationMeta> = {
    <ident:Ident> => ast::DeclItemKind::NoInit { ident },
    <ident:Ident> "=" <val:Expr0> => ast::DeclItemKind::Init { ident, val },
};

DeclItems = NonEmptySeparated<",", DeclItem>;

// --- types ---

Type: ast::Type = {
    "int" => ast::Type::Int,
    "string" => ast::Type::Str,
    "boolean" => ast::Type::Bool,
    "void" => ast::Type::Void,
    <ident:Ident> => ast::Type::Class { ident },
    <t:Type> "[]" => ast::Type::Array { item_t: Box::new(t) },
};

Types = Separated<",", Type>;

// --- expressions ---

Expr0 = Boxed<Located<Expr0Kind>>;
Expr0Kind: ast::ExpressionKind<LocationMeta> = {
    <l:Expr1> "||" <r:Expr0> => {
        ast::ExpressionKind::Binary { left: l, op: ast::BinaryOperator::Or, right: r }
    },
    <e:Expr1Kind> => (<>),
};

Expr1 = Boxed<Located<Expr1Kind>>;
Expr1Kind: ast::ExpressionKind<LocationMeta> = {
    <l:Expr2> "&&" <r:Expr1> => {
        ast::ExpressionKind::Binary { left: l, op: ast::BinaryOperator::And, right: r }
    },
    <e:Expr2Kind> => (<>),
};

Expr2 = Boxed<Located<Expr2Kind>>;
Expr2Kind: ast::ExpressionKind<LocationMeta> = {
    <left:Expr2> <op:RelOp> <right:Expr3> => {
        ast::ExpressionKind::Binary { left, op, right }
    },
    <e:Expr3Kind> => (<>),
};

RelOp: ast::BinaryOperator = {
    "<" => ast::BinaryOperator::Less,
    "<=" => ast::BinaryOperator::Less,
    "==" => ast::BinaryOperator::Equal,
    "!=" => ast::BinaryOperator::NotEqual,
    ">=" => ast::BinaryOperator::GreaterEqual,
    ">" => ast::BinaryOperator::Greater,
};

Expr3 = Boxed<Located<Expr3Kind>>;
Expr3Kind: ast::ExpressionKind<LocationMeta> = {
    <l:Expr3> <op:AddOp> <r:Expr4> => {
        ast::ExpressionKind::Binary { left: l, op: op, right: r }
    },
    <e:Expr4Kind> => (<>),
};

AddOp: ast::BinaryOperator = {
    "+" => ast::BinaryOperator::Plus,
    "-" => ast::BinaryOperator::Minus,
};

Expr4 = Boxed<Located<Expr4Kind>>;
Expr4Kind: ast::ExpressionKind<LocationMeta> = {
    <l:Expr4> <op:MulOp> <r:Expr5> => {
        ast::ExpressionKind::Binary { left: l, op: op, right: r }
    },
    <e:Expr5Kind> => (<>),
};

MulOp: ast::BinaryOperator = {
    "*" => ast::BinaryOperator::Times,
    "/" => ast::BinaryOperator::Divide,
    "%" => ast::BinaryOperator::Modulo,
};

Expr5 = Boxed<Located<Expr5Kind>>;
Expr5Kind: ast::ExpressionKind<LocationMeta> = {
    "-" <e:Expr6> => ast::ExpressionKind::Unary { op: ast::UnaryOperator::Neg, arg: e },
    "!" <e:Expr6> => ast::ExpressionKind::Unary { op: ast::UnaryOperator::Not, arg: e },
    <e:Expr6Kind> => (<>),
};

Expr6 = Boxed<Located<Expr6Kind>>;
Expr6Kind: ast::ExpressionKind<LocationMeta> = {
    "new" <t:Type> => {
        ast::ExpressionKind::InitDefault { t }
    },
    "new" <item_t:Type> "[" <size:Expr0> "]" => {
        ast::ExpressionKind::InitArr {
            t: ast::Type::Array { item_t: Box::new(item_t) }, 
            size 
        }
    },
    <r:Reference> "(" <args:Exprs> ")" => {
        ast::ExpressionKind::App { r, args }
    },
    <r:Reference> => {
        ast::ExpressionKind::Reference { r }
    },
    <val:Num> => ast::ExpressionKind::LitInt { val },
    "true" => ast::ExpressionKind::LitBool { val: true },
    "false" => ast::ExpressionKind::LitBool { val: false },
    "null" => ast::ExpressionKind::LitNull,
    // string regex from: https://stackoverflow.com/questions/249791/regex-for-quoted-string-with-escaping-quotes
    r#""(?:[^"\\]|\\.)*""# => ast::ExpressionKind::LitStr { val: String::from(<>) },
    // nested expression conflicts with type cast, so we only implement the possibility of casting null
    "(" <t:Type> <expr:NullCast> => ast::ExpressionKind::Cast { t, expr },
    // https://stackoverflow.com/questions/27448189/bison-reduce-reduce-conflict-with-casting-and-expression-parentheses
    // "(" <t:Type> ")" <expr:Expr6> => ast::Expression::Cast { t, expr },
    "(" <e:Expr0Kind> ")" => (<>),
};

Exprs = Separated<",", Expr0>;

// --- references ---

Reference = Located<ReferenceKind>;
ReferenceKind: ast::ReferenceKind<LocationMeta> = {
    <ident:Ident> => ast::ReferenceKind::Ident { ident },
    <obj:Ident> "." <field:Ident> => ast::ReferenceKind::Object { obj, field },
    "self" "." <field:Ident> => ast::ReferenceKind::ObjectSelf { field },
    <arr:Ident> "[" <idx:Expr0> "]" => ast::ReferenceKind::Array { arr, idx },
    // <ident:Ident> "." "length" => ast::ReferenceKind::ArrayLen { ident },
};

// --- special null cast ---

NullCast = Boxed<Located<NullCastKind>>;
NullCastKind: ast::ExpressionKind<LocationMeta> = {
    ")null" => ast::ExpressionKind::LitNull,
};

// --- literals ---

Ident: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => String::from(<>),
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),  // no negative numbers, just as the LBNF Integer
};
