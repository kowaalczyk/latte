-- original latte grammar without extensions: unused, pasted only for reference

-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Statement] "}" ;

separator  Statement "" ;

Empty.     Statement ::= ";" ;

BStatement.     Statement ::= Block ;

Decl.      Statement ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Statement ::= Ident "=" Expr  ";" ;

Incr.      Statement ::= Ident "++"  ";" ;

Decr.      Statement ::= Ident "--"  ";" ;

Ret.       Statement ::= "return" Expr ";" ;

VRet.      Statement ::= "return" ";" ;

Cond.      Statement ::= "if" "(" Expr ")" Statement  ;

CondElse.  Statement ::= "if" "(" Expr ")" Statement "else" Statement  ;

While.     Statement ::= "while" "(" Expr ")" Statement ;

SExp.      Statement ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Divide.       MulOp ::= "/" ;

Modulo.       MulOp ::= "%" ;

Less.       RelOp ::= "<" ;

LessEqual.        RelOp ::= "<=" ;

Greater.       RelOp ::= ">" ;

GreaterEqual.        RelOp ::= ">=" ;

Equal.       RelOp ::= "==" ;

NotEqual.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
